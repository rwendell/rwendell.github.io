{"version":3,"sources":["App.js","serviceWorker.js","index.js","files/resume.pdf"],"names":["BasicExample","className","to","exact","path","Home","Resumé","Projects","style","padding","src","defer","class","file","resume","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"yVAgBe,SAASA,IACtB,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,YACb,wBAAIA,UAAU,aACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,cAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,cAWJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,WACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,aACV,kBAACG,EAAD,UAWZ,SAASF,IACP,OACE,yBAAKG,MAAO,CAAEC,QAAS,QACrB,wCACA,0NAMA,kBAAC,IAAD,CAAWC,IAAI,0CAA0CC,OAAK,GAC3D,KAEH,yBAAKC,MAAM,uDAQjB,SAASN,IACP,OACE,6BACE,kBAAC,IAAD,CAAUO,KAAMC,MAChB,qEAA0C,uBAAGC,KAAMD,KAAT,QAA1C,wBAKN,SAASP,IACP,OACE,yBAAKC,MAAO,CAAEC,QAAS,QACrB,wCACA,oJAIA,6BAEA,6BACE,4BACE,uBAAGM,KAAK,yCAAR,cAEF,2PAQF,6BACE,4BACE,uBAAGA,KAAK,8CAAR,cAEF,uJAMF,6BACE,4BACE,uBAAGA,KAAK,gDACL,IADH,qBAKF,6HAE2B,OCrHfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.4c73f4ad.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Document } from \"react-pdf\";\nimport resume from \"./files/resume.pdf\";\nimport ScriptTag from \"react-script-tag\";\n\n// This site has 3 pages, all of which are rendered\n// dynamically in the browser (not server rendered).\n//\n// Although the page does not ever refresh, notice how\n// React Router keeps the URL up to date as you navigate\n// through the site. This preserves the browser history,\n// making sure things like the back button and bookmarks\n// work properly.\n\nexport default function BasicExample() {\n  return (\n    <Router>\n      <div className=\"App-main\">\n        <ul className=\"App-links\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/resume\">Resumé</Link>\n          </li>\n          <li>\n            <Link to=\"/projects\">Projects</Link>\n          </li>\n        </ul>\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/resume\">\n            <Resumé />\n          </Route>\n          <Route path=\"/projects\">\n            <Projects />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\nfunction Home() {\n  return (\n    <div style={{ padding: \".5%\" }}>\n      <h2>About Me</h2>\n      <p>\n        My name is Ryan Wendell. I am a software engineer with a focus on full\n        stack development. When I am not working I enjoy excercising, cooking,\n        making coffee, video gaming, and photography.\n      </p>\n\n      <ScriptTag src=\"https://apps.elfsight.com/p/platform.js\" defer>\n        {\" \"}\n      </ScriptTag>\n      <div class=\"elfsight-app-5c08177f-d7b2-4ccb-aa89-b43c38100e7d\"></div>\n      {\n        //to be implemented on my own, this is just a placeholder because I don't wanna do it right now\n      }\n    </div>\n  );\n}\n\nfunction Resumé() {\n  return (\n    <div>\n      <Document file={resume} />\n      <p>If the PDF fails to load, please click <a href={resume}>here</a> to download a copy</p>\n    </div>\n  );\n}\n\nfunction Projects() {\n  return (\n    <div style={{ padding: \".5%\" }}>\n      <h2>Projects</h2>\n      <p>\n        Here are some of the larger projects that I worked on, along with a\n        brief description and a link to their repository.\n      </p>\n      <hr></hr>\n\n      <div>\n        <h3>\n          <a href=\"https://github.com/rwendell/Smart-Art\">Smart Art</a>\n        </h3>\n        <p>\n          This is a collaborative drawing app created by Iowa State students for\n          Com S 309. We worked used the agile approach to simulate a\n          professional working environment and tried to use best industry\n          practices when developing\n        </p>\n      </div>\n\n      <div>\n        <h3>\n          <a href=\"https://github.com/davidboschwitz/all-star\"> All Star</a>\n        </h3>\n        <p>\n          The name doesn't really have anything to do with the functionality.\n          This works as a basic 2-way radio repeater over IP.\n        </p>\n      </div>\n\n      <div>\n        <h3>\n          <a href=\"https://github.com/rwendell/Password-Manager\">\n            {\" \"}\n            Password Manager\n          </a>\n        </h3>\n        <p>\n          Simple password manager that encrypts passwords and saves them to your\n          local data for retrieval{\" \"}\n        </p>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/resume.433d9a5e.pdf\";"],"sourceRoot":""}